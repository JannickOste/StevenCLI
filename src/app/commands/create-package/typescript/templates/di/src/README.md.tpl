# Typescript DI Project

Generated by steven-cli

## Table of Contents
- [Usage](#usage)
- [Project Structure](#project-structure)
- [Components](#components)
  - [Application](#application)
  - [AppStartup](#appstartup)
  - [CoreStartup](#corestartup)
  - [ApplicationBuilder](#applicationbuilder)
  - [DependencyContainer](#dependencycontainer)
- [Running the Application](#running-the-application)
- [License](#license)

## Usage

To build and run the application, use the following command:
```sh
npm start
```

This will execute the main script entry point at `./src/index.ts`.

## Project Structure

```
src/
├── app/
│   ├── domain/
│   └── infrastructure/
│       ├── Application.ts
│       ├── AppStartup.ts
├── core/
│   ├── domain/
│   │   ├── IApplication.ts
│   │   └── IStartup.ts
│   └── infrastructure/
│       ├── ApplicationBuilder.ts
│       ├── CoreStartup.ts
│       └── di/
│           └── DependencyContainer.ts
└── TYPES.ts
index.ts
```

## Components

### Application

Located in `./app/infrastructure/Application.ts`, this class implements the `IApplication` interface and contains the main logic of the application.

```typescript
import { injectable } from "inversify";
import "reflect-metadata";
import IApplication from "../../core/domain/IApplication";

@injectable()
export default class Application implements IApplication {
    public async main(): Promise<void> {
        console.log("Hello world");
    }
}
```

### AppStartup

Located in `./app/infrastructure/AppStartup.ts`, this class implements the `IStartup` interface and is responsible for registering and configuring application-specific services.

```typescript
import { Container, inject, injectable } from "inversify";
import TYPES from "../../TYPES";
import IStartup from "../../core/domain/IStartup";

@injectable()
export default class AppStartup implements IStartup {
    constructor(
        @inject(TYPES.container) private readonly container: Container
    ) {}

    async registerServices(): Promise<void> {}

    async configureServices(): Promise<void> {}
}
```

### CoreStartup

Located in `./core/infrastructure/CoreStartup.ts`, this class implements the `IStartup` interface and is responsible for registering and configuring core services.

```typescript
import { Container, inject, injectable } from "inversify";
import IStartup from "../domain/IStartup";
import TYPES from "../../TYPES";
import "reflect-metadata";

@injectable()
export default class CoreStartup implements IStartup {
    constructor(
        @inject(TYPES.container) private readonly container: Container
    ) {}

    async registerServices(): Promise<void> {}

    async configureServices(): Promise<void> {}
}
```

### ApplicationBuilder

Located in `./core/infrastructure/ApplicationBuilder.ts`, this class is responsible for constructing the application by setting up and resolving dependencies.

```typescript
import IApplication from "../domain/IApplication";
import IStartup from "../domain/IStartup";
import Application from "../../app/infrastructure/Application";
import container from "./di/DependencyContainer";
import TYPES from "../../TYPES";

export default class ApplicationBuilder {
    private appStartupConstructor: (new () => IStartup) | undefined;

    setStartUp(startup: new (...args: any[]) => IStartup): ApplicationBuilder {
        if (this.appStartupConstructor !== undefined) {
            console.warn("Warning: Overriding previous application startup file.");
        }

        this.appStartupConstructor = startup;
        return this;
    }

    async build(
        application: new (...args: any[]) => IApplication = Application
    ): Promise<IApplication> {
        if (this.appStartupConstructor) {
            container.bind<IStartup>(TYPES.Core.IStartup).to(this.appStartupConstructor);
        }

        const startupDependencies: IStartup[] = container.getAll<IStartup>(TYPES.Core.IStartup);
        for (const dependency of startupDependencies) {
            await dependency.registerServices();
        }

        for (const dependency of startupDependencies) {
            await dependency.configureServices();
        }

        return container.resolve<IApplication>(application);
    }
}
```

### DependencyContainer

Located in `./core/infrastructure/di/DependencyContainer.ts`, this class sets up the dependency injection container and registers core services.

```typescript
import { Container, injectable } from "inversify";
import TYPES from "../../../TYPES";
import "reflect-metadata";
import IStartup from "../../domain/IStartup";
import CoreStartup from "../CoreStartup";

@injectable()
class DependencyContainer extends Container {
    constructor() {
        super();
        this.registerServices();
    }

    registerServices() {
        this.bind<Container>(TYPES.container).toConstantValue(this);
        this.bind<IStartup>(TYPES.Core.IStartup).to(CoreStartup);
    }
}

const container: Container = new DependencyContainer();
export default container;
```
